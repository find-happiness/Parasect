/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 查询结果
 */
public class SearchResult implements org.apache.thrift.TBase<SearchResult, SearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResult");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdatedMillis", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchResultTupleSchemeFactory());
  }

  /**
   * url
   */
  public String url; // required
  /**
   * A list of keywords related to the result
   */
  public List<String> keywords; // required
  /**
   * The time at which the result was last checked, in unix millis
   */
  public long lastUpdatedMillis; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * url
     */
    URL((short)1, "url"),
    /**
     * A list of keywords related to the result
     */
    KEYWORDS((short)2, "keywords"),
    /**
     * The time at which the result was last checked, in unix millis
     */
    LAST_UPDATED_MILLIS((short)3, "lastUpdatedMillis");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // KEYWORDS
          return KEYWORDS;
        case 3: // LAST_UPDATED_MILLIS
          return LAST_UPDATED_MILLIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTUPDATEDMILLIS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_UPDATED_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("lastUpdatedMillis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResult.class, metaDataMap);
  }

  public SearchResult() {
    this.keywords = new ArrayList<String>();

  }

  public SearchResult(
    String url,
    List<String> keywords,
    long lastUpdatedMillis)
  {
    this();
    this.url = url;
    this.keywords = keywords;
    this.lastUpdatedMillis = lastUpdatedMillis;
    setLastUpdatedMillisIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResult(SearchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetKeywords()) {
      List<String> __this__keywords = new ArrayList<String>(other.keywords);
      this.keywords = __this__keywords;
    }
    this.lastUpdatedMillis = other.lastUpdatedMillis;
  }

  public SearchResult deepCopy() {
    return new SearchResult(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.keywords = new ArrayList<String>();

    setLastUpdatedMillisIsSet(false);
    this.lastUpdatedMillis = 0;
  }

  /**
   * url
   */
  public String getUrl() {
    return this.url;
  }

  /**
   * url
   */
  public SearchResult setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getKeywordsSize() {
    return (this.keywords == null) ? 0 : this.keywords.size();
  }

  public java.util.Iterator<String> getKeywordsIterator() {
    return (this.keywords == null) ? null : this.keywords.iterator();
  }

  public void addToKeywords(String elem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(elem);
  }

  /**
   * A list of keywords related to the result
   */
  public List<String> getKeywords() {
    return this.keywords;
  }

  /**
   * A list of keywords related to the result
   */
  public SearchResult setKeywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  /**
   * The time at which the result was last checked, in unix millis
   */
  public long getLastUpdatedMillis() {
    return this.lastUpdatedMillis;
  }

  /**
   * The time at which the result was last checked, in unix millis
   */
  public SearchResult setLastUpdatedMillis(long lastUpdatedMillis) {
    this.lastUpdatedMillis = lastUpdatedMillis;
    setLastUpdatedMillisIsSet(true);
    return this;
  }

  public void unsetLastUpdatedMillis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATEDMILLIS_ISSET_ID);
  }

  /** Returns true if field lastUpdatedMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdatedMillis() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATEDMILLIS_ISSET_ID);
  }

  public void setLastUpdatedMillisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATEDMILLIS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((List<String>)value);
      }
      break;

    case LAST_UPDATED_MILLIS:
      if (value == null) {
        unsetLastUpdatedMillis();
      } else {
        setLastUpdatedMillis((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case KEYWORDS:
      return getKeywords();

    case LAST_UPDATED_MILLIS:
      return Long.valueOf(getLastUpdatedMillis());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case KEYWORDS:
      return isSetKeywords();
    case LAST_UPDATED_MILLIS:
      return isSetLastUpdatedMillis();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResult)
      return this.equals((SearchResult)that);
    return false;
  }

  public boolean equals(SearchResult that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_lastUpdatedMillis = true;
    boolean that_present_lastUpdatedMillis = true;
    if (this_present_lastUpdatedMillis || that_present_lastUpdatedMillis) {
      if (!(this_present_lastUpdatedMillis && that_present_lastUpdatedMillis))
        return false;
      if (this.lastUpdatedMillis != that.lastUpdatedMillis)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdatedMillis()).compareTo(other.isSetLastUpdatedMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdatedMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdatedMillis, other.lastUpdatedMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchResult(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdatedMillis:");
    sb.append(this.lastUpdatedMillis);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (keywords == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keywords' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'lastUpdatedMillis' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultStandardSchemeFactory implements SchemeFactory {
    public SearchResultStandardScheme getScheme() {
      return new SearchResultStandardScheme();
    }
  }

  private static class SearchResultStandardScheme extends StandardScheme<SearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.keywords = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.keywords.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_UPDATED_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdatedMillis = iprot.readI64();
              struct.setLastUpdatedMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLastUpdatedMillis()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastUpdatedMillis' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
          for (String _iter3 : struct.keywords)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_UPDATED_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.lastUpdatedMillis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultTupleSchemeFactory implements SchemeFactory {
    public SearchResultTupleScheme getScheme() {
      return new SearchResultTupleScheme();
    }
  }

  private static class SearchResultTupleScheme extends TupleScheme<SearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.url);
      {
        oprot.writeI32(struct.keywords.size());
        for (String _iter4 : struct.keywords)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeI64(struct.lastUpdatedMillis);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.keywords = new ArrayList<String>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          String _elem7;
          _elem7 = iprot.readString();
          struct.keywords.add(_elem7);
        }
      }
      struct.setKeywordsIsSet(true);
      struct.lastUpdatedMillis = iprot.readI64();
      struct.setLastUpdatedMillisIsSet(true);
    }
  }

}


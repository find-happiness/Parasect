/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-11")
public class s2 implements org.apache.thrift.TBase<s2, s2._Fields>, java.io.Serializable, Cloneable, Comparable<s2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s2");

  private static final org.apache.thrift.protocol.TField S1_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("s1List", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FILED_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("filedMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField FILED_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSet", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new s2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new s2TupleSchemeFactory());
  }

  public List<s1> s1List; // required
  public Map<String,String> filedMap; // required
  public Set<String> filedSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    S1_LIST((short)1, "s1List"),
    FILED_MAP((short)2, "filedMap"),
    FILED_SET((short)3, "filedSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S1_LIST
          return S1_LIST;
        case 2: // FILED_MAP
          return FILED_MAP;
        case 3: // FILED_SET
          return FILED_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S1_LIST, new org.apache.thrift.meta_data.FieldMetaData("s1List", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, s1.class))));
    tmpMap.put(_Fields.FILED_MAP, new org.apache.thrift.meta_data.FieldMetaData("filedMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILED_SET, new org.apache.thrift.meta_data.FieldMetaData("filedSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s2.class, metaDataMap);
  }

  public s2() {
  }

  public s2(
    List<s1> s1List,
    Map<String,String> filedMap,
    Set<String> filedSet)
  {
    this();
    this.s1List = s1List;
    this.filedMap = filedMap;
    this.filedSet = filedSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s2(s2 other) {
    if (other.isSetS1List()) {
      List<s1> __this__s1List = new ArrayList<s1>(other.s1List.size());
      for (s1 other_element : other.s1List) {
        __this__s1List.add(new s1(other_element));
      }
      this.s1List = __this__s1List;
    }
    if (other.isSetFiledMap()) {
      Map<String,String> __this__filedMap = new HashMap<String,String>(other.filedMap);
      this.filedMap = __this__filedMap;
    }
    if (other.isSetFiledSet()) {
      Set<String> __this__filedSet = new HashSet<String>(other.filedSet);
      this.filedSet = __this__filedSet;
    }
  }

  public s2 deepCopy() {
    return new s2(this);
  }

  @Override
  public void clear() {
    this.s1List = null;
    this.filedMap = null;
    this.filedSet = null;
  }

  public int getS1ListSize() {
    return (this.s1List == null) ? 0 : this.s1List.size();
  }

  public java.util.Iterator<s1> getS1ListIterator() {
    return (this.s1List == null) ? null : this.s1List.iterator();
  }

  public void addToS1List(s1 elem) {
    if (this.s1List == null) {
      this.s1List = new ArrayList<s1>();
    }
    this.s1List.add(elem);
  }

  public List<s1> getS1List() {
    return this.s1List;
  }

  public s2 setS1List(List<s1> s1List) {
    this.s1List = s1List;
    return this;
  }

  public void unsetS1List() {
    this.s1List = null;
  }

  /** Returns true if field s1List is set (has been assigned a value) and false otherwise */
  public boolean isSetS1List() {
    return this.s1List != null;
  }

  public void setS1ListIsSet(boolean value) {
    if (!value) {
      this.s1List = null;
    }
  }

  public int getFiledMapSize() {
    return (this.filedMap == null) ? 0 : this.filedMap.size();
  }

  public void putToFiledMap(String key, String val) {
    if (this.filedMap == null) {
      this.filedMap = new HashMap<String,String>();
    }
    this.filedMap.put(key, val);
  }

  public Map<String,String> getFiledMap() {
    return this.filedMap;
  }

  public s2 setFiledMap(Map<String,String> filedMap) {
    this.filedMap = filedMap;
    return this;
  }

  public void unsetFiledMap() {
    this.filedMap = null;
  }

  /** Returns true if field filedMap is set (has been assigned a value) and false otherwise */
  public boolean isSetFiledMap() {
    return this.filedMap != null;
  }

  public void setFiledMapIsSet(boolean value) {
    if (!value) {
      this.filedMap = null;
    }
  }

  public int getFiledSetSize() {
    return (this.filedSet == null) ? 0 : this.filedSet.size();
  }

  public java.util.Iterator<String> getFiledSetIterator() {
    return (this.filedSet == null) ? null : this.filedSet.iterator();
  }

  public void addToFiledSet(String elem) {
    if (this.filedSet == null) {
      this.filedSet = new HashSet<String>();
    }
    this.filedSet.add(elem);
  }

  public Set<String> getFiledSet() {
    return this.filedSet;
  }

  public s2 setFiledSet(Set<String> filedSet) {
    this.filedSet = filedSet;
    return this;
  }

  public void unsetFiledSet() {
    this.filedSet = null;
  }

  /** Returns true if field filedSet is set (has been assigned a value) and false otherwise */
  public boolean isSetFiledSet() {
    return this.filedSet != null;
  }

  public void setFiledSetIsSet(boolean value) {
    if (!value) {
      this.filedSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case S1_LIST:
      if (value == null) {
        unsetS1List();
      } else {
        setS1List((List<s1>)value);
      }
      break;

    case FILED_MAP:
      if (value == null) {
        unsetFiledMap();
      } else {
        setFiledMap((Map<String,String>)value);
      }
      break;

    case FILED_SET:
      if (value == null) {
        unsetFiledSet();
      } else {
        setFiledSet((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case S1_LIST:
      return getS1List();

    case FILED_MAP:
      return getFiledMap();

    case FILED_SET:
      return getFiledSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case S1_LIST:
      return isSetS1List();
    case FILED_MAP:
      return isSetFiledMap();
    case FILED_SET:
      return isSetFiledSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s2)
      return this.equals((s2)that);
    return false;
  }

  public boolean equals(s2 that) {
    if (that == null)
      return false;

    boolean this_present_s1List = true && this.isSetS1List();
    boolean that_present_s1List = true && that.isSetS1List();
    if (this_present_s1List || that_present_s1List) {
      if (!(this_present_s1List && that_present_s1List))
        return false;
      if (!this.s1List.equals(that.s1List))
        return false;
    }

    boolean this_present_filedMap = true && this.isSetFiledMap();
    boolean that_present_filedMap = true && that.isSetFiledMap();
    if (this_present_filedMap || that_present_filedMap) {
      if (!(this_present_filedMap && that_present_filedMap))
        return false;
      if (!this.filedMap.equals(that.filedMap))
        return false;
    }

    boolean this_present_filedSet = true && this.isSetFiledSet();
    boolean that_present_filedSet = true && that.isSetFiledSet();
    if (this_present_filedSet || that_present_filedSet) {
      if (!(this_present_filedSet && that_present_filedSet))
        return false;
      if (!this.filedSet.equals(that.filedSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_s1List = true && (isSetS1List());
    list.add(present_s1List);
    if (present_s1List)
      list.add(s1List);

    boolean present_filedMap = true && (isSetFiledMap());
    list.add(present_filedMap);
    if (present_filedMap)
      list.add(filedMap);

    boolean present_filedSet = true && (isSetFiledSet());
    list.add(present_filedSet);
    if (present_filedSet)
      list.add(filedSet);

    return list.hashCode();
  }

  @Override
  public int compareTo(s2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetS1List()).compareTo(other.isSetS1List());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS1List()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s1List, other.s1List);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiledMap()).compareTo(other.isSetFiledMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiledMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedMap, other.filedMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiledSet()).compareTo(other.isSetFiledSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiledSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSet, other.filedSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s2(");
    boolean first = true;

    sb.append("s1List:");
    if (this.s1List == null) {
      sb.append("null");
    } else {
      sb.append(this.s1List);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filedMap:");
    if (this.filedMap == null) {
      sb.append("null");
    } else {
      sb.append(this.filedMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filedSet:");
    if (this.filedSet == null) {
      sb.append("null");
    } else {
      sb.append(this.filedSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class s2StandardSchemeFactory implements SchemeFactory {
    public s2StandardScheme getScheme() {
      return new s2StandardScheme();
    }
  }

  private static class s2StandardScheme extends StandardScheme<s2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, s2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // S1_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.s1List = new ArrayList<s1>(_list0.size);
                s1 _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new s1();
                  _elem1.read(iprot);
                  struct.s1List.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setS1ListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILED_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.filedMap = new HashMap<String,String>(2*_map3.size);
                String _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.filedMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setFiledMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILED_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.filedSet = new HashSet<String>(2*_set7.size);
                String _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.filedSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setFiledSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, s2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.s1List != null) {
        oprot.writeFieldBegin(S1_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.s1List.size()));
          for (s1 _iter10 : struct.s1List)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.filedMap != null) {
        oprot.writeFieldBegin(FILED_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.filedMap.size()));
          for (Map.Entry<String, String> _iter11 : struct.filedMap.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.filedSet != null) {
        oprot.writeFieldBegin(FILED_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.filedSet.size()));
          for (String _iter12 : struct.filedSet)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class s2TupleSchemeFactory implements SchemeFactory {
    public s2TupleScheme getScheme() {
      return new s2TupleScheme();
    }
  }

  private static class s2TupleScheme extends TupleScheme<s2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, s2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetS1List()) {
        optionals.set(0);
      }
      if (struct.isSetFiledMap()) {
        optionals.set(1);
      }
      if (struct.isSetFiledSet()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetS1List()) {
        {
          oprot.writeI32(struct.s1List.size());
          for (s1 _iter13 : struct.s1List)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetFiledMap()) {
        {
          oprot.writeI32(struct.filedMap.size());
          for (Map.Entry<String, String> _iter14 : struct.filedMap.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetFiledSet()) {
        {
          oprot.writeI32(struct.filedSet.size());
          for (String _iter15 : struct.filedSet)
          {
            oprot.writeString(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, s2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.s1List = new ArrayList<s1>(_list16.size);
          s1 _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = new s1();
            _elem17.read(iprot);
            struct.s1List.add(_elem17);
          }
        }
        struct.setS1ListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filedMap = new HashMap<String,String>(2*_map19.size);
          String _key20;
          String _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            _val21 = iprot.readString();
            struct.filedMap.put(_key20, _val21);
          }
        }
        struct.setFiledMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filedSet = new HashSet<String>(2*_set23.size);
          String _elem24;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.filedSet.add(_elem24);
          }
        }
        struct.setFiledSetIsSet(true);
      }
    }
  }

}

